AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Deploy a service on AWS Fargate along with some dummy containers

Parameters:

  ServiceName:
    Type: String
    Description: A name for the service

  VPCId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VPC that should house this cluster

  FargateContainerSubnetIDs:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet ID for the domain to operate in
  TaskContainerCpu:
    Type: Number
    Description: How much CPU to give the tasks (combined defense and offense).
  TaskContainerMemory:
    Type: Number
    Description: How much memory to give the tasks (combined defense and offense).

  ContainerDefenseName:
    Type: String
    Description: The name of a docker image that should be run from ECR
  ContainerDefensePort:
    Type: Number
    Description: What port number the application inside the docker container
  ContainerDefenseCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerDefenseMemory:
    Type: Number
    Description: How much memory in megabytes to give the container

  ContainerOffenseName:
    Type: String
    Description: The name of a docker image that should be run from ECR
  ContainerOffensePort:
    Type: Number
    Description: What port number the application inside the docker container
  ContainerOffenseCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerOffenseMemory:
    Type: Number
    Description: How much memory in megabytes to give the container

  DesiredCount:
    Type: Number
    Description: How many copies of the service task to run
  HealthEndpoint:
    Type: String
    Description: Health Endpoint to target via Application load balancer health checks

Resources:

  fargateTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ecr
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ecr:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':repository/'
                    - !Ref ContainerDefenseName
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ecr:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':repository/'
                    - !Ref ContainerOffenseName
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'

  fargateTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${ServiceName}-task'
      Cpu: !Ref TaskContainerCpu
      Memory: !Ref TaskContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref fargateTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${ServiceName}-defense'
          Cpu: !Ref ContainerDefenseCpu
          Memory: !Ref ContainerDefenseMemory
          Image: !Join
                  - ''
                  - - !Ref 'AWS::AccountId'
                    - '.dkr.ecr.'
                    - !Ref 'AWS::Region'
                    - '.amazonaws.com/'
                    - !Ref ContainerDefenseName
                    - ':latest'
          PortMappings:
            - ContainerPort: !Ref ContainerDefensePort
        - Name: !Sub '${ServiceName}-offence'
          Cpu: !Ref ContainerOffenseCpu
          Memory: !Ref ContainerOffenseMemory
          Image: !Join
                  - ''
                  - - !Ref 'AWS::AccountId'
                    - '.dkr.ecr.'
                    - !Ref 'AWS::Region'
                    - '.amazonaws.com/'
                    - !Ref ContainerOffenseName
                    - ':latest'
          PortMappings:
            - ContainerPort: !Ref ContainerOffensePort

  fargateCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${ServiceName}-cluster'

  fargateContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - Description: Container port
          IpProtocol: tcp
          FromPort: !Ref ContainerDefensePort
          ToPort: !Ref ContainerOffensePort
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
      VpcId: !Ref VPCId

  fargateService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - httpLoadBalancerDefenseListener
      - httpLoadBalancerOffenseListener
    Properties:
      ServiceName: !Sub '${ServiceName}-service'
      Cluster: !Ref fargateCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref fargateContainerSecurityGroup
          Subnets: !Ref FargateContainerSubnetIDs
      TaskDefinition: !Ref fargateTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub '${ServiceName}-defense'
          ContainerPort: !Ref ContainerDefensePort
          TargetGroupArn: !Ref targetGroupDefense

  loadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the frontend loadbalancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: HTTP Web Port from Load Balancer
          IpProtocol: tcp
          FromPort: !Ref ContainerDefensePort
          ToPort: !Ref ContainerOffensePort
      VpcId: !Ref VPCId

  loadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join
        - '-'
        - - !Ref ServiceName
          - lb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets: !Ref FargateContainerSubnetIDs

  httpLoadBalancerDefenseListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - loadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref targetGroupDefense
          Type: forward
      LoadBalancerArn: !Ref loadBalancer
      Port: !Ref ContainerDefensePort
      Protocol: HTTP

  httpLoadBalancerOffenseListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - loadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref targetGroupOffense
          Type: forward
      LoadBalancerArn: !Ref loadBalancer
      Port: !Ref ContainerOffensePort
      Protocol: HTTP

  targetGroupDefense:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: !Ref HealthEndpoint
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join
        - '-'
        - - !Ref ServiceName
          - forward-defense
      Port: !Ref ContainerDefensePort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId

  targetGroupOffense:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: !Ref HealthEndpoint
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join
        - '-'
        - - !Ref ServiceName
          - forward-offense
      Port: !Ref ContainerOffensePort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId

Outputs:

  LoadBalancerDNSName:
    Description: DNS name for the created loadbalancer.
    Value: !GetAtt
      - loadBalancer
      - DNSName

  DefenseEndpointUrl:
    Description: Request URL for the Defense API endpoint
    Value: !Join
      - ''
      - - !GetAtt
          - loadBalancer
          - DNSName
        - ':'
        - !Ref ContainerDefensePort
        - '/'

  OffenseEndpointUrl:
    Description: Request URL for the Offense API endpoint
    Value: !Join
      - ''
      - - !GetAtt
          - loadBalancer
          - DNSName
        - ':'
        - !Ref ContainerOffensePort
        - '/'

  SneakySnakeFargate:
    Description: SneakySnake Fargate Cluster
    Value: !Ref fargateCluster
    Export:
      Name: !Sub '${ServiceName}-cluster'
